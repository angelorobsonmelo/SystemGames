CREATE OR REPLACE FUNCTION public.sp_configuracao_cambista_alterar (
  "P_SEQ_CAMBISTA" integer,
  "P_LIMITE_MAX_VENDA_DIARIO" double precision,
  "P_LIMITE_MAX_VENDA_INDIVIDUAL" double precision,
  "P_OBSERVACAO" varchar,
  "P_COD_USUARIO" integer,
  "P_COMISSAO_UM" integer,
  "P_COMISSAO_DOIS" integer,
  "P_COMISSAO_TRES" integer
)
RETURNS varchar AS
$body$
DECLARE
P_MSG_RETORNO VARCHAR = '';

BEGIN

  UPDATE CONFIGURACAO_CAMBISTA
  SET LIMITE_MAX_VENDA_DIARIO = $2,  
      LIMITE_MAX_VENDA_INDIVIDUAL = $3,
      OBSERVACAO = $4,
      COD_USUARIO = $5,
      COMISSAO1 = $6,
      COMISSAO2 = $7,
      COMISSAO3 = $8      
  WHERE SEQ_CAMBISTA = $1;

  P_MSG_RETORNO = 'OK';
    
  RETURN P_MSG_RETORNO;

EXCEPTION
	WHEN UNIQUE_VIOLATION THEN
		P_MSG_RETORNO = SQLERRM;
        RETURN P_MSG_RETORNO;
	WHEN INTEGRITY_CONSTRAINT_VIOLATION THEN
		P_MSG_RETORNO = SQLERRM;
		RETURN P_MSG_RETORNO;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;



CREATE OR REPLACE FUNCTION public.sp_configuracao_cambista_buscar_todos (
  out "P_CS_GERAL" refcursor
)
RETURNS refcursor AS
$body$
DECLARE
 P_CS_GERAL REFCURSOR;

BEGIN

OPEN $1 FOR EXECUTE
 'SELECT U.*, CC.* FROM USUARIO U, TIPO_USUARIO TU, CONFIGURACAO_CAMBISTA CC
 WHERE U.COD_TIPO_USUARIO = TU.SEQ_TIPO_USUARIO
 AND CC.COD_USUARIO = U.SEQ_USUARIO
 ORDER BY CC.SEQ_CAMBISTA';
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


CREATE OR REPLACE FUNCTION public.sp_configuracao_cambista_inserir (
  "P_LIMITE_MAX_VENDA_DIARIO" double precision,
  "P_LIMITE_MAX_VENDA_INDIVIDUAL" double precision,
  "P_OBSERVACAO" varchar,
  "P_COD_USUARIO" integer,
  "P_COMISSAO_UM" integer,
  "P_COMISSAO_DOIS" integer,
  "P_COMISSAO_TRES" integer
)
RETURNS varchar AS
$body$
DECLARE
 P_MSG_RETORNO VARCHAR = '';
 BEGIN 
 
 INSERT INTO configuracao_cambista (LIMITE_MAX_VENDA_DIARIO, LIMITE_MAX_VENDA_INDIVIDUAL,
 OBSERVACAO, COD_USUARIO, COMISSAO1, COMISSAO2, COMISSAO3) VALUES ($1, $2, $3, $4, $5, $6, $7);

 P_MSG_RETORNO = 'OK';
 RETURN P_MSG_RETORNO;
 EXCEPTION 
 WHEN UNIQUE_VIOLATION THEN
 P_MSG_RETORNO = SQLERRM;
 RETURN P_MSG_RETORNO;
 WHEN INTEGRITY_CONSTRAINT_VIOLATION THEN 
 P_MSG_RETORNO = SQLERRM;
 RETURN P_MSG_RETORNO; 
 END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


CREATE OR REPLACE FUNCTION public.sp_configuracao_cambista_remover (
  "P_SEQ_CAMBISTA" integer
)
RETURNS varchar AS
$body$
DECLARE
P_MSG_RETORNO VARCHAR = '';

BEGIN

  DELETE FROM CONFIGURACAO_CAMBISTA WHERE SEQ_CAMBISTA = $1;

  P_MSG_RETORNO = 'OK';
    
  RETURN P_MSG_RETORNO;

EXCEPTION
	WHEN UNIQUE_VIOLATION THEN
		P_MSG_RETORNO = SQLERRM;
        RETURN P_MSG_RETORNO;
	WHEN INTEGRITY_CONSTRAINT_VIOLATION THEN
		P_MSG_RETORNO = SQLERRM;
		RETURN P_MSG_RETORNO;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


