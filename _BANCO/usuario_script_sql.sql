CREATE OR REPLACE FUNCTION public.sp_usuario_alterar (
  "P_SEQ_USUARIO" integer,
  "P_NOM_USUARIO" varchar,
  "P_EMAIL" varchar,
  "P_SENHA" varchar,
  "P_CPF" varchar,
  "P_NUM_RG" varchar,
  "P_CONTATO" varchar,
  "P_COD_TIPO_USUARIO" integer,
  "P_ENDERECO" varchar,
  "P_NUM_ENDERECO" varchar,
  "P_COMPLEMENTO" varchar,
  "P_BAIRRO" varchar,
  "P_CIDADE" varchar,
  "P_NUM_CEP" varchar,
  "P_UF" varchar,
  "P_NOM_LOGIN" varchar
)
RETURNS varchar AS
$body$
DECLARE
P_MSG_RETORNO VARCHAR = '';

BEGIN

  UPDATE USUARIO
  SET NOME_USUARIO = $2,  
      EMAIL		     = $3,
      SENHA = $4,
      CPF = $5,
      NUM_RG = $6,
      CONTATO = $7,
      COD_TIPO_USUARIO = $8,
      ENDERECO = $9,
      NUM_ENDERECO = $10,
      COMPLEMENTO = $11,
      BAIRRO = $12,
      CIDADE = $13,
      CEP = $14,
      UF = $15, 
      NOM_LOGIN = $16
  WHERE SEQ_USUARIO = $1;

  P_MSG_RETORNO = 'OK';
    
  RETURN P_MSG_RETORNO;

EXCEPTION
	WHEN UNIQUE_VIOLATION THEN
		P_MSG_RETORNO = SQLERRM;
        RETURN P_MSG_RETORNO;
	WHEN INTEGRITY_CONSTRAINT_VIOLATION THEN
		P_MSG_RETORNO = SQLERRM;
		RETURN P_MSG_RETORNO;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;



CREATE OR REPLACE FUNCTION public.sp_usuario_buscar_todos (
  out "P_CS_GERAL" refcursor
)
RETURNS refcursor AS
$body$
DECLARE
 P_CS_GERAL REFCURSOR;

BEGIN

OPEN $1 FOR EXECUTE
  'SELECT U.*, CC.* FROM USUARIO U, TIPO_USUARIO TU, CONFIGURACAO_CAMBISTA CC
 WHERE U.COD_TIPO_USUARIO = TU.SEQ_TIPO_USUARIO
 AND CC.COD_USUARIO = U.SEQ_USUARIO
 ORDER BY U.NOME_USUARIO';
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


CREATE OR REPLACE FUNCTION public.sp_usuario_consultar_por_parametros (
  out "P_CS_GERAL" refcursor
)
RETURNS refcursor AS
$body$
DECLARE
 P_CS_GERAL REFCURSOR;
BEGIN
	
 OPEN $1 FOR EXECUTE 
 'SELECT U.*, CC.* FROM USUARIO U, TIPO_USUARIO TU, CONFIGURACAO_CAMBISTA CC
 WHERE U.COD_TIPO_USUARIO = TU.SEQ_TIPO_USUARIO
 AND CC.COD_USUARIO = U.SEQ_USUARIO
 ' || SCRIPT || ' ORDER BY U.NOME_USUARIO';
 
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


CREATE OR REPLACE FUNCTION public.sp_usuario_inserir (
  "P_NOM_USUARIO" varchar,
  "P_EMAIL" varchar,
  "P_LOGIN" varchar,
  "P_SENHA" varchar,
  "P_CPF" varchar,
  "P_NUM_RG" varchar,
  "P_NUM_CONTATO" varchar,
  "P_COD_TIPO_USUARIO" integer,
  "P_ENDERECO" varchar,
  "P_NUM_ENDERECO" varchar,
  "P_COMPLEMENTO" varchar,
  "P_BAIRRO" varchar,
  "P_CIDADE" varchar,
  "P_NUM_CEP" varchar,
  "P_UF" varchar
)
RETURNS varchar AS
$body$
DECLARE
 P_MSG_RETORNO VARCHAR = '';   
 P_SEQUENCIAL INTEGER = 0;
 BEGIN 
 
 INSERT INTO usuario (NOME_USUARIO, EMAIL, NOM_LOGIN, SENHA, CPF, NUM_RG, CONTATO, COD_TIPO_USUARIO,
 ENDERECO, NUM_ENDERECO, COMPLEMENTO, BAIRRO, CIDADE, CEP, UF)
 VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
 
 P_SEQUENCIAL = currval('usuario_seq_usuario_seq');
 P_MSG_RETORNO = 'OK' ||'SEQ_USUARIO' || P_SEQUENCIAL;
 
 RETURN P_MSG_RETORNO;
 EXCEPTION 
 WHEN UNIQUE_VIOLATION THEN
 P_MSG_RETORNO = SQLERRM;
 RETURN P_MSG_RETORNO;
 WHEN INTEGRITY_CONSTRAINT_VIOLATION THEN 
 P_MSG_RETORNO = SQLERRM;
 RETURN P_MSG_RETORNO; 
 END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


CREATE OR REPLACE FUNCTION public.sp_usuario_remover (
  "P_SEQ_USUARIO" integer
)
RETURNS varchar AS
$body$
DECLARE
P_MSG_RETORNO VARCHAR = '';

BEGIN

  DELETE FROM USUARIO WHERE SEQ_USUARIO = $1;

  P_MSG_RETORNO = 'OK';
    
  RETURN P_MSG_RETORNO;

EXCEPTION
	WHEN UNIQUE_VIOLATION THEN
		P_MSG_RETORNO = SQLERRM;
        RETURN P_MSG_RETORNO;
	WHEN INTEGRITY_CONSTRAINT_VIOLATION THEN
		P_MSG_RETORNO = SQLERRM;
		RETURN P_MSG_RETORNO;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;